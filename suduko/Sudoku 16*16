
#include <iostream>

using namespace std;


const int Z = 4;    
const int EMPTY = 0;       
const int STOP_INPUT = -1;  

/* declaring functions here should be added*/
void input_sud(int sud[][Z*Z]);
bool fill_sud(int sud[][Z*Z], int row, int col);
void print_sud(const int sud[][Z*Z]);
bool is_legal(const int sud[][Z*Z], int row, int col, int val);
bool is_row_ok(const int row[], int col, int val);
bool is_col_ok(const int sud[][Z*Z], int row, int col, int val);
bool is_sqr_ok(const int sud[][Z*Z], int row, int col, int val);

int main()
{
    int sud[Z*Z][Z*Z] = { { EMPTY } };  

    input_sud(sud);
    fill_sud(sud, 0, 0);
    print_sud(sud);

    return 0;
}

void input_sud(int sud[][Z*Z])
{
    for(int i = 0; i < Z*Z; i++)
        for(int j = 0; j < Z*Z; j++)
            cin >> sud[i][j];
}

bool fill_sud(int sud[][Z*Z], int row, int col)
{
  
    int next_row = (col == Z*Z - 1) ? row + 1 : row;


    int next_col = (col + 1) % (Z*Z);


    if(row == Z*Z)  
        return true;

    if(sud[row][col] != EMPTY)
        return fill_sud(sud, next_row, next_col);

    for(int value = 1; value <= Z*Z; value++)
    {
        sud[row][col] = value;

    
        if(is_legal(sud, row, col, value) && fill_sud(sud, next_row, next_col))
            return true;
            
        sud[row][col] = EMPTY;
    }

    return false;
}


void print_sud(const int sud[][Z*Z])
{
    for(int i = 0; i < Z*Z; i++)
    {
        for(int j = 0; j < Z*Z; j++)
            cout << sud[i][j] << ' ';
        cout << endl;
    }
}

/* checking for value ? */





bool is_row_ok(const int row[], int col, int val)
{
    for(int i = 0; i < Z*Z; i++)
        if(i != col && row[i] == val)
            return false;   

    return true;
}

bool is_col_ok(const int sud[][Z*Z], int row, int col, int val)
{
    for(int i = 0; i < Z*Z; i++)
        if(i != row && sud[i][col] == val)
            return false;     

    return true;
}

bool is_sqr_ok(const int sud[][Z*Z], int row, int col, int val)
{
    int row_corner = (row / Z) * Z;

    int col_corner = (col / Z) * Z;


    for(int i = row_corner; i < (row_corner + Z); i++)
        for(int j = col_corner; j < (col_corner + Z); j++)
            if((i != row || j != col) && sud[i][j] == val)
                return false;     

    return true;
}
